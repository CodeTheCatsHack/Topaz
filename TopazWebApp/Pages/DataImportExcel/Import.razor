@page "/import"
@using Topaz.Data.Service
@using Scaffold.Model
@inherits Topaz.Data.ImportDataComponent

<div class="sidebar">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">Действия</a>
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>
    <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
        <nav class="flex-column">
            @if (ServiceInfoMeasure.Measures.Count != 0)
            {
                <div class="nav-item px-3">
                    <Button @onclick="OnMeasureClick">Информацию по филиалам</Button>
                </div>
                <div class="nav-item px-3">
                    <Button @onclick="OnMeasureInfoClick">Подробная информация по филиалам</Button>
                </div>
                <div class="nav-item px-3">
                    <Button @onclick="OnVoiceConnectionMetricClick">Показатели голосового соединения</Button>
                </div>
                <div class="nav-item px-3">
                    <Button @onclick="OnMessagingMetricClick">Показатели передачи текстовых сообщений</Button>
                </div>
                <div class="nav-item px-3">
                    <Button @onclick="OnHttpTransmittingMetricClick">Показатели по передаче данных(за исключением услуг связи по передаче данных для целей передачи голосовой информации)</Button>
                </div>
                <div class="nav-item px-3">
                    <Button @onclick="OnReferenceInfoMetricClick">Справочная информация</Button>
                </div>
            }
            else
            {
                <div>
                    Нет Данных
                </div>
            }
        </nav>
    </div>
</div>

<h1>Импорт</h1>

<div class="table-wrapper">
    @switch (ViewDataStatus)
    {
        case ViewData.MeasureInfo:
            break;
        case ViewData.Measure:
            <Validations @ref="@Validator" Mode="ValidationMode.Manual" Model="@SelectedMeasure" HandlerType="typeof(FluentValidationHandler)">
                <DataGrid TItem="Measure"
                          @ref="DataGridView"
                          Data="@DataViewMeasure"
                          bind-SelectedRow="SelectedMeasure"
                          PageSize="10"
                          TotalItems="@Total"
                          ShowPager="true"
                          Responsive
                          Editable
                          Filterable
                          Sortable
                          FilterMode="DataGridFilterMode.Menu"
                          SortMode="DataGridSortMode.Multiple"
                          UseValidation
                          ShowValidationsSummary="true">
                    <DataGridColumn Field="@nameof(Measure.Place)" Caption="Место контроля" Editable>
                        <EditTemplate>
                            <Validation>
                                <TextEdit Text="@((string)context.CellValue)" TextChanged="value => context.CellValue = value">
                                    <Feedback>
                                        <ValidationError/>
                                    </Feedback>
                                </TextEdit>
                            </Validation>
                        </EditTemplate>
                    </DataGridColumn>
                    <DataGridColumn Field="@nameof(Measure.Equipment)" Caption="Измерительное оборудование" Editable/>
                    <DataGridColumn Field="@nameof(Measure.Conditions)" Caption="Условия контроля" Editable/>
                    <DataGridColumn Field="@nameof(Measure.StartMeasure)" Caption="Дата начала контроля" Editable/>
                    <DataGridColumn Field="@nameof(Measure.EndMeasure)" Caption="Дата конца контроля" Editable/>
                    <DataGridCommandColumn/>
                </DataGrid>
            </Validations>
            break;
        case ViewData.ReferanceInfo:

            break;
        case ViewData.MessagingMetrics:

            break;
        case ViewData.ReferanceMetricsInfo:

            break;
        case ViewData.HttpTransmittingMetric:

            break;
        case ViewData.VoiceConnectionMetric:

            break;
        default:
            throw new ArgumentOutOfRangeException();
    }

    <div class="filters">
        <Button class="save" @onclick="Validation">Сохранить</Button>

        <div class="filters-menu">
            <div class="filter-item file">
                <Field>
                    <FileEdit @ref="fileEdit" Changed="OnChanged" Filter=".xls, .xlsx" Multiple/>
                </Field>

                <button @onclick="UploadFiles">Upload Files</button>
            </div>
        </div>

        <Button class="cancel">Отмена</Button>
    </div>
</div>